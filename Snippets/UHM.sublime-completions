// See http://docs.sublimetext.info/en/latest/reference/completions.html
{
    "scope": "source.uhm",

    "completions": [
        { "trigger": "inf\tInfo", "contents": "Info \"$0\"" },
        { "trigger": "int\tInterpolate", "contents": "Interpolate type=morph2$0" },
        { "trigger": "wav\tWave", "contents": "Wave \"$0\"" },
        { "trigger": "spe\tSpectrum", "contents": "Spectrum \"$0\"" },
        { "trigger": "pha\tPhase", "contents": "Phase \"$0\"" },
        { "trigger": "env\tEnvelope", "contents": "Envelope $0" },
        { "trigger": "nor\tNormalize", "contents": "Normalize base=each$0" },
        { "trigger": "see\tSeed", "contents": "Seed = $0" },
        { "trigger": "num\tNumFrames", "contents": "NumFrames = $0" },
        { "trigger": "imp\tImport", "contents": "Import \"$0\"" },
        { "trigger": "mov\tMove", "contents": "Move $0" },

        { "trigger": "t\ttable", "contents": "table" },
        { "trigger": "i\tindex", "contents": "index" },
        { "trigger": "p\tphase", "contents": "phase" },
        { "trigger": "f\tframe", "contents": "frame" },
        { "trigger": "r\trand", "contents": "rand" },

        { "trigger": "rep\treplace", "contents": "replace" },
        { "trigger": "mult\tmultiply", "contents": "multiply" },
        { "trigger": "multa\tmultiplyAbs", "contents": "multiplyAbs" },
        { "trigger": "div\tdivide", "contents": "divide" },
        { "trigger": "diva\tdivideAbs", "contents": "divideAbs" },
        { "trigger": "min\tthe smaller absolute value", "contents": "min" },
        { "trigger": "max\tthe larger absolute value", "contents": "max" },

        { "trigger": "st\tstart", "contents": "start=" },
        { "trigger": "en\tend", "contents": "end=" },
        { "trigger": "bl\tblend", "contents": "blend=" },
        { "trigger": "lo\tlowest", "contents": "lowest=" },
        { "trigger": "hi\thighest", "contents": "highest=" },
        { "trigger": "dir\tdirection", "contents": "direction=" },
        { "trigger": "fr\tfrom", "contents": "from=" },
        { "trigger": "to\tto", "contents": "to=" },
        { "trigger": "ty\ttype", "contents": "type=" },
        { "trigger": "sn\tsnippets", "contents": "snippets=" },
        { "trigger": "tr\tthreshold", "contents": "threshold=" },
        { "trigger": "we\tweighting", "contents": "weighting=" },
        { "trigger": "cu\tcurve", "contents": "curve=" },
        { "trigger": "bas\tbase", "contents": "base=" },

        { "trigger": "fo\tforward", "contents": "forward" },
        { "trigger": "ba\tbackward", "contents": "backward" },
        { "trigger": "tar\ttarget", "contents": "target" },
        { "trigger": "so\tsource", "contents": "source" },
        { "trigger": "sw\tswitch", "contents": "switch" },
        { "trigger": "cr\tcrossfade", "contents": "crossfade" },
        { "trigger": "sp\tspectrum", "contents": "spectrum" },
        { "trigger": "ze\tzerophase", "contents": "zerophase" },
        { "trigger": "mo\tmorph1", "contents": "morph1" },
        { "trigger": "mor\tmorph2", "contents": "morph2" },
        { "trigger": "m\tmain", "contents": "main" },
        { "trigger": "a\taux1", "contents": "aux1" },
        { "trigger": "aa\taux2", "contents": "aux2" },
        { "trigger": "dis\tdistance", "contents": "distance" },
        { "trigger": "lev\tlevel", "contents": "level" },
        { "trigger": "met\tmetric", "contents": "metric" },
        { "trigger": "av\taverage", "contents": "average" },
        { "trigger": "lin\tlinear", "contents": "linear" },
        { "trigger": "ex\texponential", "contents": "exponential" },
        { "trigger": "q\tquadric", "contents": "quadric" },

        { "trigger": "e\tenv()", "contents": "env($0)" },
        { "trigger": "low\tlowpass()", "contents": "lowpass($0)" },
        { "trigger": "ban\tbandpass()", "contents": "bandpass($0)" },
        { "trigger": "hig\thighpass()", "contents": "highpass($0)" },

        { "trigger": "acos\tarccosine - acos()", "contents": "acos($0)" },
        { "trigger": "asin\tarcsine - asin()", "contents": "asin($0)" },
        { "trigger": "atan\tarctangent - atan()", "contents": "atan($0)" },
        { "trigger": "atan2\tarctangent2 - atan2(x,y)", "contents": "atan2($1, $0)" },
        { "trigger": "cos\tcosine - cos()", "contents": "cos($0)" },
        { "trigger": "cosh\thyperbolic cosine - cosh()", "contents": "cosh($0)" },
        { "trigger": "sin\tsine - sin()", "contents": "sin($0)" },
        { "trigger": "sinh\thyperbolic sine - sinh()", "contents": "sinh($0)" },
        { "trigger": "tan\ttangent - tan()", "contents": "tan($0)" },
        { "trigger": "tanh\thyperbolic tangent - tanh()", "contents": "tanh($0)" },

        { "trigger": "abs\tabsolute (positive) value", "contents": "abs($0)" },
        { "trigger": "ceil\tround up to next integer value", "contents": "ceil($0)" },
        { "trigger": "floor\tround down to next integer value", "contents": "floor($0)" },
        { "trigger": "frac\tfractional part only", "contents": "frac($0)" },
        { "trigger": "round\tto nearest integer (up or down)", "contents": "round($0)" },
        { "trigger": "select\tif x==1.0 ? y : z", "contents": "select($1, $2, $0)" },
        { "trigger": "exp\texponent (e^x)", "contents": "exp($0)" },
        { "trigger": "fac\tfactorial", "contents": "fac($0)" },
        { "trigger": "ln\tnatural logarithm", "contents": "ln($0)" },
        { "trigger": "log\tnatural logarithm", "contents": "log($0)" },
        { "trigger": "log10\tlog base 10", "contents": "log10($0)" },
        { "trigger": "pow\texponent (x^y)", "contents": "pow($1, $0)" },
        { "trigger": "sqrt\tsquare root", "contents": "sqrt($0)" },
        { "trigger": "lin_db\tconvert linear value to dB", "contents": "lin_db($0)" },
        { "trigger": "db_lin\tconvert dB to linear value", "contents": "db_lin($0)" },
        
        { "trigger": "main_fi\tmain_fi(frame,index)", "contents": "main_fi(${1:frame}, ${2:index})" },
        { "trigger": "main_fp\tmain_fi(frame,phase)", "contents": "main_fp(${1:frame}, ${2:phase})" },
        { "trigger": "aux1_fi\taux1_fi(frame,index)", "contents": "aux1_fi(${1:frame}, ${2:index})" },
        { "trigger": "aux1_fp\taux1_fp(frame,phase)", "contents": "aux1_fp(${1:frame}, ${2:phase})" },
        { "trigger": "aux2_fi\taux2_fi(frame,index)", "contents": "aux1_fi(${1:frame}, ${2:index})" },
        { "trigger": "aux2_fp\taux2_fp(frame,phase)", "contents": "aux1_fp(${1:frame}, ${2:phase})" },
    ]
}
